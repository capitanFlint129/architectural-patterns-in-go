@startuml
'https://plantuml.com/class-diagram

' Interfaces

interface Service {
	+CreateEvent(ctx context.Context, data types.EventHandlerData) : (types.Event, error)
	+UpdateEvent(ctx context.Context, data types.UpdateEventHandlerData) : (types.Event, error)
	+DeleteEvent(ctx context.Context, data types.EventHandlerData) : error
	+EventsForPeriod(ctx context.Context, data types.DateIntervalHandlerData) : ([]types.Event, error)
}

interface CreateEventClientTransport {
	+EncodeRequest(data types.EventHandlerData) (*http.Request, error)
	+DecodeResponse(r *http.Response) (types.Event, error)
}

interface UpdateEventClientTransport {
	+EncodeRequest(data types.UpdateEventHandlerData) (*http.Request, error)
	+DecodeResponse(r *http.Response) (types.Event, error)
}

interface DeleteEventClientTransport {
	+EncodeRequest(data types.EventHandlerData) (*http.Request, error)
	+DecodeResponse(r *http.Response) error
}

interface EventsForPeriodClientTransport {
	+EncodeRequest(data types.DateIntervalHandlerData) (*http.Request, error)
	+DecodeResponse(r *http.Response) ([]types.Event, error)
}

interface ErrorClientTransport {
    +DecodeError(r *http.Response) : error
}

'Classes

class client {
    -createEventClientTransport:    CreateEventClientTransport
    -updateEventClientTransport:    UpdateEventClientTransport
    -deleteEventClientTransport:    DeleteEventClientTransport
    -eventsForPeriodClientTransport: EventsForPeriodClientTransport

	+CreateEvent(ctx context.Context, data types.EventHandlerData) : (types.Event, error)
	+UpdateEvent(ctx context.Context, data types.UpdateEventHandlerData) : (types.Event, error)
	+DeleteEvent(ctx context.Context, data types.EventHandlerData) : error
	+EventsForPeriod(ctx context.Context, data types.DateIntervalHandlerData) : ([]types.Event, error)
}

class createEventClientTransport {
    -url: *url.URL
    -path: string
    -httpMethod: string
    -errorTransport: ErrorClientTransport
    -dateFormat: string

    +EncodeRequest(data types.EventHandlerData) : (*http.Request, error)
    +DecodeResponse(r *http.Response) : (types.Event, error)
}

class updateEventClientTransport {
    -url: *url.URL
    -path: string
    -httpMethod: string
    -errorTransport: ErrorClientTransport
    -dateFormat: string

    +EncodeRequest(data types.UpdateEventHandlerData) : (*http.Request, error)
    +DecodeResponse(r *http.Response) : (types.Event, error)
}

class deleteEventClientTransport {
    -url: *url.URL
    -path: string
    -httpMethod: string
    -errorTransport: ErrorClientTransport
    -dateFormat: string

	+EncodeRequest(data types.EventHandlerData) (*http.Request, error)
	+DecodeResponse(r *http.Response) error
}

class eventsForPeriodClientTransport {
    -url: *url.URL
    -path: string
    -httpMethod: string
    -errorTransport: ErrorClientTransport
    -dateFormat: string

	+EncodeRequest(data types.DateIntervalHandlerData) (*http.Request, error)
	+DecodeResponse(r *http.Response) ([]types.Event, error)
}

class errorClientTransport {
    +DecodeError(r *http.Response) : error
}

' Connections

class client implements Service
class createEventClientTransport implements CreateEventClientTransport
class updateEventClientTransport implements UpdateEventClientTransport
class deleteEventClientTransport implements DeleteEventClientTransport
class eventsForPeriodClientTransport implements EventsForPeriodClientTransport
class errorClientTransport implements ErrorClientTransport


client o--> CreateEventClientTransport
client o--> UpdateEventClientTransport
client o--> DeleteEventClientTransport
client o--> EventsForPeriodClientTransport

createEventClientTransport o--> ErrorClientTransport
updateEventClientTransport o--> ErrorClientTransport
deleteEventClientTransport o--> ErrorClientTransport
eventsForPeriodClientTransport o--> ErrorClientTransport

@enduml
