// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// handler is an autogenerated mock type for the handler type
type handler struct {
	mock.Mock
}

type handler_Expecter struct {
	mock *mock.Mock
}

func (_m *handler) EXPECT() *handler_Expecter {
	return &handler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: problem
func (_m *handler) Handle(problem string) (string, error) {
	ret := _m.Called(problem)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(problem)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(problem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// handler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type handler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//  - problem string
func (_e *handler_Expecter) Handle(problem interface{}) *handler_Handle_Call {
	return &handler_Handle_Call{Call: _e.mock.On("Handle", problem)}
}

func (_c *handler_Handle_Call) Run(run func(problem string)) *handler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *handler_Handle_Call) Return(_a0 string, _a1 error) *handler_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func NewHandler() *handler {
	return &handler{}
}
